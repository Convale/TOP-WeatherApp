{"version":3,"sources":["images/weather_icons sync /^/icon_.*/.png$","images/weather_icons/icon_01d.png","images/weather_icons/icon_01n.png","images/weather_icons/icon_02d.png","images/weather_icons/icon_02n.png","images/weather_icons/icon_03d.png","images/weather_icons/icon_03n.png","images/weather_icons/icon_04d.png","images/weather_icons/icon_04n.png","images/weather_icons/icon_09d.png","images/weather_icons/icon_09n.png","images/weather_icons/icon_10d.png","images/weather_icons/icon_10n.png","images/weather_icons/icon_11d.png","images/weather_icons/icon_11n.png","images/weather_icons/icon_13d.png","images/weather_icons/icon_13n.png","images/weather_icons/icon_50d.png","weatherDisplay.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","WeatherDisplay","props","weatherIconImport","require","weatherData","weather","icon","className","searchBox","onClick","openSearchBox","name","onSubmit","handleSubmit","type","onChangeCapture","handleCityInput","closeSearchBox","loadingError","src","alt","main","Math","round","temp","fahrenheit","feels_like","Date","toLocaleTimeString","hour","minute","convertDate","getMonth","getDate","getFullYear","temp_min","temp_max","humidity","wind","speed","cityInput","searchCity","workingLS","WeatherApp","event","preventDefault","getAPIData","target","value","setState","state","isLoaded","bind","JSON","parse","localStorage","this","script","document","createElement","body","appendChild","result","fetch","mode","response","json","cod","stringify","message","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.198ff17e.chunk.js","sourcesContent":["var map = {\n\t\"./icon_01d.png\": 18,\n\t\"./icon_01n.png\": 19,\n\t\"./icon_02d.png\": 20,\n\t\"./icon_02n.png\": 21,\n\t\"./icon_03d.png\": 22,\n\t\"./icon_03n.png\": 23,\n\t\"./icon_04d.png\": 24,\n\t\"./icon_04n.png\": 25,\n\t\"./icon_09d.png\": 26,\n\t\"./icon_09n.png\": 27,\n\t\"./icon_10d.png\": 28,\n\t\"./icon_10n.png\": 29,\n\t\"./icon_11d.png\": 30,\n\t\"./icon_11n.png\": 31,\n\t\"./icon_13d.png\": 32,\n\t\"./icon_13n.png\": 33,\n\t\"./icon_50d.png\": 34\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 17;","module.exports = __webpack_public_path__ + \"static/media/icon_01d.3eec3fdf.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_01n.bdd4f326.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_02d.54d93916.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_02n.2608e729.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_03d.3ff78779.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_03n.f9c5bca8.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_04d.3ff78779.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_04n.f9c5bca8.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_09d.aff873ca.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_09n.974a616a.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_10d.aff873ca.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_10n.974a616a.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_11d.75a1db2b.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_11n.e7eecdda.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_13d.03182491.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_13n.b9bd6540.png\";","module.exports = __webpack_public_path__ + \"static/media/icon_50d.e854bb61.png\";","import React from 'react';\r\nimport './index.css';\r\n\r\n\r\nexport default function WeatherDisplay(props) {\r\n    const weatherIconImport = require('./images/weather_icons/icon_'+props.weatherData.weather[0].icon+'.png');\r\n\r\n    return (\r\n        <div className=\"weatherContainer\">\r\n            {(props.searchBox === false) ? <div className=\"cityName\" onClick={e => props.openSearchBox(e)}>{props.weatherData.name}</div> :\r\n            <div className=\"cityName\">\r\n                <div>\r\n                    <form onSubmit={e => props.handleSubmit(e)}>\r\n                        <input type=\"text\" className=\"citySearchBox\" onChangeCapture={e => props.handleCityInput(e)}/>\r\n                        <button className=\"citySearchCancel\" type=\"button\" onClick={e => props.closeSearchBox(e)}>X</button>\r\n                    </form>\r\n                </div>\r\n               {(props.loadingError != null) ? <div className=\"apiErrorCode\">Error: {props.loadingError}</div> : null }\r\n            </div>}\r\n            <div className=\"weatherIcon\">\r\n                <img src={weatherIconImport} alt=\"weather type icon\"/>\r\n                <div className=\"weatherDescription\">{props.weatherData.weather[0].main}</div>\r\n            </div>\r\n            <div className=\"tempuratureInfo\">\r\n                <div className=\"tempuratureDisplay\">{Math.round(props.weatherData.main.temp)} 째{(props.fahrenheit === true) ? \"F\" : \"C\"}</div>\r\n                <div>Real Feel: {Math.round(props.weatherData.main.feels_like)} 째{(props.fahrenheit === true) ? \"F\" : \"C\"}</div>\r\n            </div>\r\n            <div className=\"timeInfo\">\r\n                <div className=\"timeDisplay\">{getTime()}</div>\r\n                <div>{getDate()}</div>\r\n            </div>\r\n            <div className=\"otherInfo\">\r\n                <div>Low: {Math.round(props.weatherData.main.temp_min)} 째{(props.fahrenheit === true) ? \"F\" : \"C\"}</div>\r\n                <div>High: {Math.round(props.weatherData.main.temp_max)} 째{(props.fahrenheit === true) ? \"F\" : \"C\"}</div>\r\n                <div>Humidity: {Math.round(props.weatherData.main.humidity)}째</div>\r\n                <div>Wind: {Math.round(props.weatherData.wind.speed)} mph</div>               \r\n            </div>\r\n        </div>        \r\n    )\r\n}\r\n\r\nfunction getTime() {\r\n    const convertDate = new Date();\r\n    return convertDate.toLocaleTimeString([], {hour: 'numeric', minute:'2-digit'})\r\n}\r\n\r\nfunction getDate() {\r\n    const convertDate = new Date();\r\n    return (convertDate.getMonth() + 1) + \"/\" + convertDate.getDate() + \"/\" + convertDate.getFullYear();\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport WeatherDisplay from './weatherDisplay';\r\n\r\nvar apiCallOpenWeatherKey = \"8093a0fd1fbc1c30215fdca1950f2900\";\r\nvar cityInput = '';\r\nvar searchCity = \"San%20Francisco,CA,US\";\r\nvar workingLS = false;\r\n\r\nclass WeatherApp extends React.Component {   \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          weatherData: [],\r\n          loadingError: null,\r\n          fahrenheit: true,\r\n          isLoaded: false,\r\n          searchBox: false,\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCityInput = this.handleCityInput.bind(this);\r\n        this.openSearchBox = this.openSearchBox.bind(this);\r\n        this.closeSearchBox = this.closeSearchBox.bind(this);\r\n    }\r\n    \r\n    async componentDidMount() {\r\n        try {\r\n            searchCity = JSON.parse(localStorage.searchCity);\r\n            workingLS = true;\r\n        }\r\n        catch {\r\n            searchCity = \"San%20Francisco,CA,US\";\r\n        }\r\n        this.getAPIData();\r\n\r\n        const script = document.createElement(\"script\");\r\n        script.src = \"https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch.umd.js\";\r\n        document.body.appendChild(script);\r\n    }\r\n    \r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        searchCity = cityInput;\r\n        this.getAPIData();\r\n    }\r\n\r\n    handleCityInput = (event) => {\r\n        cityInput = event.target.value;\r\n    }\r\n\r\n    openSearchBox = () => {\r\n        this.setState({\r\n            searchBox: true,\r\n        });\r\n    }\r\n\r\n    closeSearchBox = () => {\r\n        this.setState({\r\n            searchBox: false,\r\n            loadingError: null,\r\n        });\r\n    }\r\n\r\n    async getAPIData() {\r\n        let result = [];\r\n        try {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchCity}&appid=${apiCallOpenWeatherKey}&units=imperial`, { mode: 'cors' });\r\n            result = await response.json();\r\n        } catch (error) {\r\n            this.setState({\r\n            loadingError: error,\r\n            isLoaded: true,\r\n            })\r\n        } finally {\r\n            if (result.cod === 200) {\r\n                if (workingLS === true) {\r\n                    localStorage.searchCity = JSON.stringify(searchCity);\r\n                }\r\n                this.setState({\r\n                    weatherData: result,\r\n                    isLoaded: true,\r\n                    searchBox: false,\r\n                    loadingError: null,\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    loadingError: result.message,\r\n                    isLoaded: true,\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            ((this.state.isLoaded === true) ? \r\n                <WeatherDisplay\r\n                    weatherData={this.state.weatherData}\r\n                    loadingError={this.state.loadingError}\r\n                    fahrenheit={this.state.fahrenheit}\r\n                    handleSubmit={this.handleSubmit}\r\n                    handleCityInput={this.handleCityInput}\r\n                    searchBox={this.state.searchBox}\r\n                    openSearchBox={this.openSearchBox}\r\n                    closeSearchBox={this.closeSearchBox}\r\n                /> : null)\r\n        )\r\n    }\r\n}\r\n\r\n//-- Initialize\r\nReactDOM.render( <WeatherApp />, document.getElementById('root') );\r\n\r\n\r\n/*-- App agenda outline\r\n\r\nImplementing a weather app using React (first React project)\r\n\r\n1) create outline in react/CSS\r\n    area in the middle to display:\r\n        city name (done)\r\n        weather type (done)\r\n        tempurature (done)\r\n        feels like temp (done)\r\n        min temp / max temp (done)\r\n        humidity (done)\r\n        wind (done)\r\n\r\n    area to input city user wants info on (done)\r\n        auto get info from geolocation (paused)\r\n        error handling (done)\r\n        autocomplete city search (paused -google had paywall)\r\n    ability to change from C* / F*\r\n\r\n\r\n2) create call for geolocation from browser (paused)\r\n\r\n3) create call for weather from OpenWeather (done)\r\n    https://openweathermap.org/current\r\n    key: 8093a0fd1fbc1c30215fdca1950f2900\r\n    \r\n4) localStorage for location (done)\r\n\r\n5) add-ons: \r\n    fun add on implement giphy background image based off weather\r\n    animation for city search\r\n\r\nNext Steps:\r\n    Scrub my API key\r\n    focus \r\n    Ability to change the temp unit (F/C)\r\n    Time interval update\r\n    ability to get geolocation from browser\r\n    animate the city search bar to open up / close down\r\n    add a better background possibly giphy\r\n    add 5 day weather forecast\r\n*/"],"sourceRoot":""}